name: Auto-Run ML Model on Push

on:
  push:
      branches-ignore:  # ‚õî main Î∏åÎûúÏπòÎäî Î¨¥ÏãúÌï®
      - main

jobs:
  run_ml_model:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python    
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r modeling/requirements.txt
          pip install dvc  # Ensure DVC is installed
          pip install mlflow jq

      - name: Extract MLflow Credentials from `env_1`
        run: |
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_TRACKING_USERNAME }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_TRACKING_PASSWORD }}" >> $GITHUB_ENV

      # - name: Extract CUSTOMER_ID, SKU, RUN_ID from Commit Message
      #   run: |
      #     COMMIT_MSG=$(git log -1 --pretty=%B)
      #     CLEAN_MSG=$(echo "$COMMIT_MSG" | tr '\n' ' ')  # Î™®Îì† Ï§ÑÎ∞îÍøà Ï†úÍ±∞

      #     echo "üìù Commit Message: $CLEAN_MSG"

      #     CUSTOMER_ID=$(echo "$CLEAN_MSG" | grep -oP '(?<=CUSTOMER_ID=)[a-zA-Z0-9]+' || true)
      #     SKU=$(echo "$CLEAN_MSG" | grep -oP '(?<=SKU=)[\w-]+' || true)
      #     RUN_ID=$(echo "$CLEAN_MSG" | grep -oP '(?<=RUN_ID=)[\w-]+' || true)
 

 
      #     if [ -z "$CUSTOMER_ID" ] || [ -z "$SKU" ] || [ -z "$RUN_ID" ]; then
      #       echo "üö´ ÌïÑÏàò ÌååÎùºÎØ∏ÌÑ∞ ÎàÑÎùΩ! CUSTOMER_ID, SKU, RUN_ID Ï§ë ÌïòÎÇòÎùºÎèÑ ÏóÜÏúºÎ©¥ ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ï§ëÎã®"
      #       echo "CUSTOMER_ID=$CUSTOMER_ID"
      #       echo "SKU=$SKU"
      #       echo "RUN_ID=$RUN_ID"
      #       echo "skip_workflow=true" >> $GITHUB_ENV
      #       exit 0
      #     fi

      #     echo "‚úÖ Extracted CUSTOMER_ID=$CUSTOMER_ID, SKU=$SKU, RUN_ID=$RUN_ID"

      #     echo "CUSTOMER_ID=$CUSTOMER_ID" >> $GITHUB_ENV
      #     echo "SKU=$SKU" >> $GITHUB_ENV
      #     echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV



      - name: Fetch and compare all metrics
        if: env.skip_workflow != 'true'
        env:
          MLFLOW_TRACKING_USERNAME: ${{ env.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ env.MLFLOW_TRACKING_PASSWORD }}
        run: |
          echo "Fetching metrics using Python..."
          cd modeling/commons
          python get_metrics.py > metrics_output.txt

          echo "üöÄ Full model comparison results:"
          cat metrics_output.txt

          while read -r line; do
            IFS=',' read -r customer store sku new_metric_str old_metric_str is_first_str <<< "$line"

            new_metric=$(echo "$new_metric_str" | cut -d '=' -f2)
            old_metric=$(echo "$old_metric_str" | cut -d '=' -f2)
            is_first_model=$(echo "$is_first_str" | cut -d '=' -f2)

            echo "üîç [$customer | $store | $sku] ‚Üí NEW=$new_metric, OLD=$old_metric, FIRST=$is_first_model"

            # Ïó¨Í∏∞ÏÑú Î∞îÎ°ú Îì±Î°ù Ïó¨Î∂Ä ÌåêÎã®ÌïòÍ±∞ÎÇò, ÌååÏùº Ï†ÄÏû•/Slack ÏïåÎ¶º Îì± ÌõÑÏ≤òÎ¶¨ Í∞ÄÎä•
          done < metrics_output.txt




      - name: Compare new vs old metrics


        if: env.skip_workflow != 'true'

        run: |
          echo "Comparing NEW_METRIC=${{ env.NEW_METRIC }} vs OLD_METRIC=${{ env.OLD_METRIC }}"

          if (( $(echo "${{ env.NEW_METRIC }} < ${{ env.OLD_METRIC }}" | bc -l) )); then
            echo "metric_check=success" >> $GITHUB_ENV
            echo "[${{ env.CUSTOMER_ID }}, ${{ env.SKU }}] ‚úÖ Model Performance Improved"
            echo: "New metric ${{ env.NEW_METRIC }} is same or better than old one ${{ env.OLD_METRIC }}. All good! :rocket:"
          else
            echo "metric_check=failure" >> $GITHUB_ENV
            echo "[${{ env.CUSTOMER_ID }}, ${{ env.SKU }}] ‚ö†Ô∏è Model Performance Degraded or Same"
            echo "New metric ${{ env.NEW_METRIC }} is worse than old one or same as before ${{ env.OLD_METRIC }}. Check model performance. :warning:"
          fi

      


      # - name: Slack notify on metric degradation
      #   if: env.metric_check == 'failure'
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK__CICD_DATA_NOTI_DEV }}
      #     SLACK_COLOR: "#FF0000"
      #     SLACK_TITLE: "[${{ env.CUSTOMER_ID }}, ${{ env.SKU }}, ${{ env.RUN_ID}}] ‚ö†Ô∏è Model Performance Degraded or Same"
      #     SLACK_MESSAGE: "New metric ${{ env.NEW_METRIC }} is worse than old one or same as before ${{ env.OLD_METRIC }}. Check model performance. :warning:"


      # - name: Slack notify on metric improvement
      #   if: env.metric_check == 'success'
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK__CICD_DATA_NOTI_DEV }}
      #     SLACK_COLOR: "#36A64F"
      #     SLACK_TITLE: "[${{ env.CUSTOMER_ID }}, ${{ env.SKU }}, ${{ env.RUN_ID}}] ‚úÖ Model Performance Improved"
      #     SLACK_MESSAGE: "New metric ${{ env.NEW_METRIC }} is same or better than old one ${{ env.OLD_METRIC }}. All good! :rocket:"

 

      # - name: Slack notify on first model registration
      #   if: env.IS_FIRST_MODEL == 'true'
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK__CICD_DATA_NOTI_DEV }}
      #     SLACK_COLOR: "#439FE0"
      #     SLACK_TITLE: "[${{ env.CUSTOMER_ID }}, ${{ env.SKU }}, ${{ env.RUN_ID}}] üì¶ First Model Registered"
      #     SLACK_MESSAGE: "No previous model found. This run is registered as the first version for ${{ env.CUSTOMER_ID }} & ${{ env.SKU }}."